------------------------  
CLEANING UP WITH MIDDLEWARE  
------------------------  



------------------------  
DEALING WITH CYCLIC REQUIRES 
------------------------  



------------------------  
PRE-REMOVE MIDDLEWARE 
------------------------ 
- In our app we are going to have both Posts AND BlogPosts
    - posts --> Points to PostSchema 
    - BlogPosts --> Separate collection of Posts 



------------------------  
TESTING PRE-REMOVE MIDDLEWARE 
------------------------ 
HOW DO WE REFERENCE ONE TYPE OF MODEL TO ANOTHER?

1) Setup a reference to another collection on a Schema 
    - Use array to specify a 'to many' relationship  
    - Put the configuration object inside of the array 
2) Config object EXAMPLE: {type: Schema.Types.ObjectID, ref: "Comment"}
    - Type --> allows you to specify a reference to a 
      record in another collection
        - This example uses the ObjectID as a reference 
    - Ref --> Specify which collection we are referencing to. 
        - You have to use the same string used when creating the 
          reference model. 
        - For instance, if you registered a User model as 'author'
            - You have to use 'author' in the config object if you 
              want to reference that collection.
        **** ASIDE **** 
            - Mongoose normalizes collection/model names to be ALL LOWERCASE. 
            - So even if you do: 
                mongoose.model('Author', AuthorSchema);
                - The model will still be accessible through the connection 
                  as 'author'. 

3) Set up a corresponding reference on the alternate model Schema. 
    - Do the same thing but on the reference model Schema. 



------------------------  
TEST SETUP FOR ASSOCIATIONS 
------------------------ 
- Make sure to drop other collections in the before() hook as well 
- However by dropping each collection sequentially the code to 
  do this is acheived easily via nesting callbacks (callback hell).
    - This is a less-than-ideal solution, but is needed because you aren't able 
      to drop multiple collections at the same time (in Mongo).

EXAMPLE: 
    users.drop(() => {
        comments.drop(() => {
            blogPosts.drop(() => {
                // ready to run the next test.
                done();
            });
        }); 
    });



------------------------  
WIRING UP "HAS MANY" AND "HAS ONE" RELATIONSHIPS 
------------------------
- 



------------------------  
Promise.All FOR PARALLEL OPERATIONS 
------------------------



------------------------  
POPULATING QUERIES 
------------------------



------------------------  
LOADING DEEPLY NESTED ASSOCIATIONS 
------------------------